package charNorm

// GenerateVariations takes an input string and a normalization map,
// and returns a slice of unique strings.
// The variations are generated by replacing characters in the input string
// with their normalized forms, one character at a time.
// The original input string is also included.
func GenerateVariations(input string, normMap map[rune][]rune) []string {
	// Use a map to store variations to ensure uniqueness easily
	variationsSet := make(map[string]struct{})

	// 2. Add the original input string to this slice as a baseline.
	// (Implicitly handled by variationsSet, will be added before returning if not otherwise generated)
	// Or, more directly:
	variationsSet[input] = struct{}{}

	// 3. Convert the input string to a slice of runes
	runes := []rune(input)

	// Handle empty input string explicitly after adding it to the set.
	// If input is "", runes will be empty, loop won't run, returns {""}
	if input == "" {
		return []string{""}
	}

	// 4. Iterate through the `runes` slice using an index `i` and character `char`.
	for i, char := range runes {
		// 5a. Check if `char` exists as a key in the `normMap`.
		if normalizedRunes, ok := normMap[char]; ok {
			// 5b. If it does, iterate through each `normalizedRune` in `normMap[char]`.
			for _, normalizedRune := range normalizedRunes {
				// 5c.i. Create a new slice of runes, `newRunes`, by copying the original `runes`.
				newRunes := make([]rune, len(runes))
				copy(newRunes, runes)

				// 5c.ii. Replace the character at index `i` in `newRunes` with `normalizedRune`.
				newRunes[i] = normalizedRune

				// 5c.iii. Convert `newRunes` back to a string.
				variationString := string(newRunes)

				// 5c.iv. Add this new string to the `variations` slice (actually, the set).
				variationsSet[variationString] = struct{}{}
			}
		}
	}

	// 6. After iterating through all characters and their normalizations,
	// ensure the `variations` slice contains only unique strings. (Handled by using variationsSet)

	// 7. Return the slice of unique string variations.
	result := make([]string, 0, len(variationsSet))
	for variation := range variationsSet {
		result = append(result, variation)
	}

	return result
}
